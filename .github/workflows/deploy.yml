name: AWS CDK Deployment

on:
  push:
    branches:
      - develop
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Entorno de despliegue'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request" ] && [ "${{ github.event.pull_request.merged }}" == "true" ] && [ "${{ github.base_ref }}" == "main" ]; then
            # Despliegue a producción cuando se fusiona un PR a main
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            # Despliegue a desarrollo para cualquier otro caso
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

  test:
    runs-on: ubuntu-latest
    needs: determine-environment
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          
      - name: Install dependencies
        run: go mod download
        
      - name: Run tests
        run: go test -v ./...

  deploy:
    runs-on: ubuntu-latest
    needs: [determine-environment, test]
    if: github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    # Asignar el entorno detectado a este trabajo
    environment: ${{ needs.determine-environment.outputs.environment }}
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      # Instalar AWS CDK CLI
      - name: Install AWS CDK
        run: npm install -g aws-cdk
      
      # Configurar credenciales AWS con OIDC usando variables del entorno actual
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      
      # Definir variables de entorno usando GITHUB_ENV 
      # Esto las hace disponibles para todos los pasos subsiguientes
      - name: Set common environment variables
        run: |
          echo "USER_VAR_LOG_CHAN=${{ vars.LOG_CHAN }}" >> $GITHUB_ENV
          echo "USER_VAR_LOG_LEVEL=${{ vars.LOG_LEVEL }}" >> $GITHUB_ENV
          echo "USER_VAR_VPC_ID=${{ vars.VPC_ID }}" >> $GITHUB_ENV
          echo "USER_VAR_SUBNET_IDS=${{ vars.SUBNET_IDS }}" >> $GITHUB_ENV
          echo "USER_VAR_SECURITY_GROUP_IDS=${{ vars.SECURITY_GROUP_IDS }}" >> $GITHUB_ENV
          echo "USER_VAR_AWS_ACCOUNT_ID=${{ vars.AWS_ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "USER_VAR_AWS_REGION=${{ vars.AWS_REGION }}" >> $GITHUB_ENV
          echo "USER_VAR_REDIS_HOST=${{ secrets.USER_VAR_REDIS_HOST }}" >> $GITHUB_ENV
          echo "USER_VAR_MONGO_DB_NAME=${{ vars.MONGO_DB_NAME }}" >> $GITHUB_ENV
          echo "USER_VAR_MONGO_COLLECTION=${{ vars.MONGO_COLLECTION }}" >> $GITHUB_ENV
          echo "JSII_SILENCE_WARNING_DEPRECATED_NODE_VERSION=true" >> $GITHUB_ENV
      
      # Paso de depuración para variables de entorno de GitHub
      - name: Debug environment variables
        run: |
          echo "=== Debugging Environment Variables ==="
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
          echo "GITHUB_BASE_REF: $GITHUB_BASE_REF"
          echo "Event name: ${{ github.event_name }}"
          echo "Environment: ${{ needs.determine-environment.outputs.environment }}"
          echo "AWS_REGION: ${{ vars.AWS_REGION }}"
          echo "AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}"
          echo "USER_VAR_DB_MONGO_URI is set: ${{ secrets.USER_VAR_DB_MONGO_URI != '' }}"
          echo "USER_VAR_MONGO_DB_NAME is set: ${{ vars.MONGO_DB_NAME != '' }}"
          echo "USER_VAR_MONGO_COLLECTION is set: ${{ vars.MONGO_COLLECTION != '' }}"
          echo "USER_VAR_REDIS_HOST is set: ${{ secrets.USER_VAR_REDIS_HOST != '' }}"
          echo "USER_VAR_LOG_CHAN: $USER_VAR_LOG_CHAN"
          echo "USER_VAR_LOG_LEVEL: $USER_VAR_LOG_LEVEL"
          echo "USER_VAR_VPC_ID: $USER_VAR_VPC_ID"
          echo "USER_VAR_SUBNET_IDS: $USER_VAR_SUBNET_IDS" 
          echo "USER_VAR_SECURITY_GROUP_IDS: $USER_VAR_SECURITY_GROUP_IDS"
          echo "USER_VAR_AWS_ACCOUNT_ID: $USER_VAR_AWS_ACCOUNT_ID"
          echo "USER_VAR_AWS_REGION: $USER_VAR_AWS_REGION"
      
      # Crear un archivo temporal para el bootstrap
      - name: Create bootstrap script
        run: |
          cat > bootstrap.sh << 'EOF'
          #!/bin/bash
          echo "Bootstrapping CDK environment..."
          echo "Account ID: $USER_VAR_AWS_ACCOUNT_ID"
          echo "Region: $USER_VAR_AWS_REGION"
          cdk bootstrap "aws://${USER_VAR_AWS_ACCOUNT_ID}/${USER_VAR_AWS_REGION}" --force
          EOF
          chmod +x bootstrap.sh
      
      # Bootstrap CDK con la variable MongoDB y Redis explícitamente definidas
      - name: Bootstrap CDK
        env:
          USER_VAR_DB_MONGO_URI: ${{ secrets.USER_VAR_DB_MONGO_URI }}
          USER_VAR_REDIS_HOST: ${{ secrets.USER_VAR_REDIS_HOST }}
        run: ./bootstrap.sh
      
      # Ejecutar deploy.go con todas las variables de entorno necesarias
      - name: Run deploy.go script
        env:
          USER_VAR_DB_MONGO_URI: ${{ secrets.USER_VAR_DB_MONGO_URI }}
          USER_VAR_REDIS_HOST: ${{ secrets.USER_VAR_REDIS_HOST }}
        run: go run deploy.go
      
      # Construir la aplicación para Lambda
      - name: Build Lambda Function
        env:
          USER_VAR_DB_MONGO_URI: ${{ secrets.USER_VAR_DB_MONGO_URI }}
          USER_VAR_REDIS_HOST: ${{ secrets.USER_VAR_REDIS_HOST }}
        run: |
            # Navegar al directorio del módulo que contiene el código
            cd authorizer/app
            
            # Descargar dependencias del módulo
            go mod download
            
            mkdir -p .aws-sam/build/LambdaAuthorizer
            GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags="-s -w" -o .aws-sam/build/LambdaAuthorizer/bootstrap authorizer/app/cmd/main.go
      
      # Sintetizar la aplicación CDK
      - name: CDK Synth
        env:
          USER_VAR_DB_MONGO_URI: ${{ secrets.USER_VAR_DB_MONGO_URI }}
          USER_VAR_REDIS_HOST: ${{ secrets.USER_VAR_REDIS_HOST }}
        run: cdk synth
      
      # Desplegar la aplicación CDK
      - name: CDK Deploy
        env:
          USER_VAR_DB_MONGO_URI: ${{ secrets.USER_VAR_DB_MONGO_URI }}
          USER_VAR_REDIS_HOST: ${{ secrets.USER_VAR_REDIS_HOST }}
        run: cdk deploy --require-approval never --all